import java.util.Random;
import java.util.Scanner;
public class Life {

    // is the game running?
    private boolean running = true;

    // the number of rows
    private int rows;

    // the number of columns
    private int cols;

    // the 2-dimensional grid
    private boolean[][] grid;

    /**
     * The Constructor
     *
     * @param rows the number of rows in the grid
     * @param cols the number of columns in the grid
     */
    public Life(int rows, int cols) {

	this.rows=rows;
	this.cols=cols;

	this.grid = new boolean[rows][cols];

    } // Life


    /**
     * Generates the initial population randomly
     *
     * @param numCells the number of initial cells
     */
    public void init(int numCells) {
	Random rand = new Random();
	for(int i=0; i<numCells; i++){
	    int randRow = rand.nextInt(rows);
	    int randCol = rand.nextInt(cols);
	    if(!grid[randRow][randCol])
		grid[randRow][randCol]=true;
             
	}

    } // init

    /**
     * Displays the grid.
     */
    public void display() {
	for(int i=0; i<this.rows+2; i++){
	    System.out.print("*");
	}
	System.out.println();
	for(int i=0; i<this.rows; i++){
	    System.out.print("*");
	    for(int j=0; j<this.cols; j++){
                if(this.grid[i][j]){
		    System.out.print("+");
		}
		else{
		    System.out.print(" ");
		}
	    }
	    System.out.println("*");

	}
	for(int i=0; i<this.rows+2; i++){
	    System.out.print("*");

	}
	System.out.println();
    } // display

    /**
     * Prompts the user for input.
     */
    public void prompt() {
	Scanner keyboard = new Scanner(System.in);
	System.out.print("(c)ontinue or (q)uit: ");
	String input = keyboard.nextLine();
	input=input.trim();
	if(input.equalsIgnoreCase("q")){
	    running=false;
	}
	else {
	    while(!input.equalsIgnoreCase("c") && !input.equalsIgnoreCase("q")){
		System.out.print("Incorrect input. Please try again.");
		input=keyboard.nextLine();
		input=input.trim();
	    }
	    if(input.equalsIgnoreCase("q")){
		running=false;
	    }
	    else{
		running=true;
	    }
	}
	
         
         

             
         
    } // prompt

    /**
     * Updates the grid according to the rules.
     */
    public void update() {
	int neighbors = 0;  
	boolean[][] temp = new boolean[rows][cols];
	for(int i=0; i<rows; i++){
	    for(int j=0; j<cols; j++){
		neighbors=0;
		// checks right
		if(j==cols-1){
		    if(grid[i][0]){
			neighbors++;
		    }
		}
		if (j != cols - 1){
		    if (grid[i][j+1]){
			neighbors++;
		    }
		}
		// checks bottom right
		if (i != rows-1 && j != cols-1){
		    if (grid[i+1][j+1]){
			neighbors++;
		    }
		}
		else if(i==rows-1 && j==cols-1){
		    if(grid[0][0]){
			neighbors++;
		    }
		}
		else if(i==rows-1){
		    if(grid[0][j+1]){
			neighbors++;
		    }
		}
		else{
		    if(grid[i+1][0]){
			neighbors++;
		    }
		}
		// checks bottom
		if (i != rows - 1){
		    if (grid[i+1][j]){
			neighbors++;
		    }
		}
		if(i==rows-1){
		    if(grid[0][j]){
			neighbors++;
		    }
		}
        
		// checks bottom left
		if (i != rows-1 && j != 0){
		    if (grid[i+1][j-1]){
			neighbors++;
		    }
		}
		else if(i==rows-1 && j==0){
		    if(grid[0][cols-1]){
			neighbors++;
		    }
		}
		else if(i==rows){
		    if(grid[0][j-1]){
			neighbors++;
		    }
		}
		else{
		    if(grid[i][cols-1]){
			neighbors++;
		    }
		}
		// checks left
		if (j != 0){
		    if (grid[i][j-1]){
			neighbors++;
		    }
		}
		else if(j==0){
		    if(grid[i][cols-1]){
			neighbors++;
		    }
		}
        
		// checks top left
		if (i != 0 && j != 0){
		    if (grid[i-1][j-1]){
			neighbors++;
		    }
		}
		else if(i==0 && j==0){
		    if(grid[rows-1][cols-1]){
			neighbors++;
		    }
		}
		else if(i==0){
		    if(grid[i+1][cols-1]){
			neighbors++;
		    }
		}
		else{
		    if(grid[rows-1][cols-2]){
			neighbors++;
		    }
		}
		//checks up
		if (i != 0){
		    if (grid[i-1][j]){
			neighbors++;
		    }
		}
		else if(i==0){
		    if(grid[rows-1][j]){
			neighbors++;
		    }
		}
        
		// checks top right
		if (i != 0 && j != cols-1){
		    if (grid[i - 1][j + 1]){
			neighbors++;
		    }
		}
		else if(i==0 && j==cols-1){
		    if(grid[rows-1][0]){
			neighbors++;
		    }
		}
		else if(i==0){
		    if(grid[rows-1][j+1]){
			neighbors++;
		    }
		}
		else{
		    if(grid[i-1][0]){
			neighbors++;
		    }
		}
		if(grid[i][j]){
		    if(neighbors<2)
			temp[i][j]=false;
		    if(neighbors==2 || neighbors==3)
			temp[i][j]=true;
		    if(neighbors>3)
			temp[i][j]=false;
		}
		else{
		    if(neighbors==3)
			temp[i][j]=true;
		}
        
	    }
	}
    
	for(int i=0; i<rows; i++){
	    for(int j=0; j<cols; j++){
		grid[i][j]=temp[i][j];
	    }
	}
    }//update
    
    /**
     * Returns true if the game is running, false otherwise.
     *
     * @return true if the game is running, false otherwise.
     */
    public boolean isRunning() {
	return this.running;
    } // isRunning

    /**
     * Returns the number of rows in the grid.
     *
     * @return the number of rows in the grid
     */
    public int getRows() {
	return this.rows;
    } // getRows

    /**
     * Returns the number of columns in the grid.
     *
     * @return the number of columns in the grid
     */
    public int getCols() {
	return this.cols;
    } // getCols

    /**
     * Returns the value of the cell at the specified location within the grid.
     *
     * @return the value of the cell at the specified location within the grid
     */
    public boolean getCell(int row, int col) {
	// HINT: You can modify this method to make your algorithm a lot easier
	return this.grid[row][col];
    } // getCell

    /**
     * Sets the value of the cell at the specified location within the grid.
     *
     * @param row the row index of the cell
     * @param col the col index of the cell
     * @param alive true if you the specified cell should be made alive, false
     *        otherwise.
     */
    public void setCell(int row, int col, boolean alive) {
	// HINT: You can modify this method to make your algorithm a lot easier
	this.grid[row][col] = alive;
    } // setCell

}